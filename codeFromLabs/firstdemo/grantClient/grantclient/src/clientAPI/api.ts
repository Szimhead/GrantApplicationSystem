/// <reference path="./custom.d.ts" />
// tslint:disable
//@ts-nocheck
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AnswerDTO
 */
export interface AnswerDTO {
    /**
     * 
     * @type {number}
     * @memberof AnswerDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AnswerDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerDTO
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerDTO
     */
    datatype: string;
    /**
     * 
     * @type {number}
     * @memberof AnswerDTO
     */
    dataItemId?: number;
}

/**
 * 
 * @export
 * @interface ApplicationDTO
 */
export interface ApplicationDTO {
    /**
     * 
     * @type {number}
     * @memberof ApplicationDTO
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationDTO
     */
    status: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationDTO
     */
    studentId: number;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationDTO
     */
    submissionDate: Date;
}

/**
 * 
 * @export
 * @interface CVDTO
 */
export interface CVDTO {
    /**
     * 
     * @type {number}
     * @memberof CVDTO
     */
    id: number;
    /**
     * 
     * @type {Array<CVItemDTO>}
     * @memberof CVDTO
     */
    items: Array<CVItemDTO>;
}

/**
 * 
 * @export
 * @interface CVItemDTO
 */
export interface CVItemDTO {
    /**
     * 
     * @type {number}
     * @memberof CVItemDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CVItemDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CVItemDTO
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof CVItemDTO
     */
    datatype: string;
    /**
     * 
     * @type {number}
     * @memberof CVItemDTO
     */
    cvReqId?: number;
}

/**
 * 
 * @export
 * @interface CVRequirementDTO
 */
export interface CVRequirementDTO {
    /**
     * 
     * @type {number}
     * @memberof CVRequirementDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CVRequirementDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CVRequirementDTO
     */
    datatype: string;
    /**
     * 
     * @type {boolean}
     * @memberof CVRequirementDTO
     */
    isMandatory?: boolean;
}

/**
 * 
 * @export
 * @interface DataItemDTO
 */
export interface DataItemDTO {
    /**
     * 
     * @type {number}
     * @memberof DataItemDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DataItemDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DataItemDTO
     */
    datatype: string;
    /**
     * 
     * @type {boolean}
     * @memberof DataItemDTO
     */
    isMandatory?: boolean;
}

/**
 * 
 * @export
 * @interface GrantCallDTO
 */
export interface GrantCallDTO {
    /**
     * 
     * @type {Date}
     * @memberof GrantCallDTO
     */
    closeDate: Date;
    /**
     * 
     * @type {string}
     * @memberof GrantCallDTO
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof GrantCallDTO
     */
    funding: number;
    /**
     * 
     * @type {number}
     * @memberof GrantCallDTO
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof GrantCallDTO
     */
    openDate: Date;
    /**
     * 
     * @type {number}
     * @memberof GrantCallDTO
     */
    sponsorId: number;
    /**
     * 
     * @type {string}
     * @memberof GrantCallDTO
     */
    title: string;
}

/**
 * 
 * @export
 * @interface Iterable
 */
export interface Iterable {
}

/**
 * 
 * @export
 * @interface OrganizationDTO
 */
export interface OrganizationDTO {
    /**
     * 
     * @type {number}
     * @memberof OrganizationDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDTO
     */
    contact: string;
}

/**
 * 
 * @export
 * @interface PanelDTO
 */
export interface PanelDTO {
    /**
     * 
     * @type {number}
     * @memberof PanelDTO
     */
    id: number;
}

/**
 * 
 * @export
 * @interface ReviewDTO
 */
export interface ReviewDTO {
    /**
     * 
     * @type {string}
     * @memberof ReviewDTO
     */
    comment: string;
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof ReviewDTO
     */
    isAccepted: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    reviewerId: number;
}

/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    address: string;
}


/**
 * ApplicationControllerApi - fetch parameter creator
 * @export
 */
export const ApplicationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds an answer to an application with a given id
         * @param {number} id The id of the application to add the answer to
         * @param {AnswerDTO} name The name of the answer to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAnswerUsingPOST(id: number, name: AnswerDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addAnswerUsingPOST.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling addAnswerUsingPOST.');
            }
            const localVarPath = `/applications/{id}/answers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AnswerDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(name || {}) : (name || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a review to an application with a given id
         * @param {number} id The id of the application to add the review to
         * @param {ReviewDTO} reviewId The id of the review to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewUsingPOST(id: number, reviewId: ReviewDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addReviewUsingPOST.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling addReviewUsingPOST.');
            }
            const localVarPath = `/applications/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reviewId || {}) : (reviewId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete answer by name in Application with a given id
         * @param {number} answerId The id of the answer to get
         * @param {number} id The id of the application to delete the answer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnswerUsingDELETE(answerId: number, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'answerId' is not null or undefined
            if (answerId === null || answerId === undefined) {
                throw new RequiredError('answerId','Required parameter answerId was null or undefined when calling deleteAnswerUsingDELETE.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAnswerUsingDELETE.');
            }
            const localVarPath = `/applications/{id}/answers/{answerId}`
                .replace(`{${"answerId"}}`, encodeURIComponent(String(answerId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete review by id in Application with a given id
         * @param {number} id The id of the application to delete the review from
         * @param {number} reviewId The id of the review to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewUsingDELETE(id: number, reviewId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteReviewUsingDELETE.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling deleteReviewUsingDELETE.');
            }
            const localVarPath = `/applications/{id}/reviews/{reviewId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit answer by name in Application with a given id
         * @param {number} id The id of the application to edit the answer from
         * @param {AnswerDTO} name The name of the answer to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAnswerUsingPUT(id: number, name: AnswerDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editAnswerUsingPUT.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling editAnswerUsingPUT.');
            }
            const localVarPath = `/applications/{id}/answers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AnswerDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(name || {}) : (name || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Application by id
         * @param {ApplicationDTO} app app
         * @param {number} id The id of the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editApplicationUsingPUT(app: ApplicationDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'app' is not null or undefined
            if (app === null || app === undefined) {
                throw new RequiredError('app','Required parameter app was null or undefined when calling editApplicationUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editApplicationUsingPUT.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApplicationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(app || {}) : (app || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit review by id in Application with a given id
         * @param {number} id The id of the application to edit the review from
         * @param {ReviewDTO} reviewId The id of the review to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReviewUsingPUT(id: number, reviewId: ReviewDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editReviewUsingPUT.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling editReviewUsingPUT.');
            }
            const localVarPath = `/applications/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reviewId || {}) : (reviewId || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Answers in Application with a given id
         * @param {number} id The id of the application to get the answers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAnswersUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllAnswersUsingGET.');
            }
            const localVarPath = `/applications/{id}/answers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Reviews in Application with a given id
         * @param {number} id The id of the application to get all Reviews from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReviewsFromApplicationUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllReviewsFromApplicationUsingGET.');
            }
            const localVarPath = `/applications/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Applications
         * @param {string} [filter] filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(filter?: string, options: any = {}): FetchArgs {
            const localVarPath = `/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get answer by name in Application with a given id
         * @param {number} answerId The id of the answer to get
         * @param {number} id The id of the application to get the answer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneAnswerUsingGET(answerId: number, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'answerId' is not null or undefined
            if (answerId === null || answerId === undefined) {
                throw new RequiredError('answerId','Required parameter answerId was null or undefined when calling getOneAnswerUsingGET.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneAnswerUsingGET.');
            }
            const localVarPath = `/applications/{id}/answers/{answerId}`
                .replace(`{${"answerId"}}`, encodeURIComponent(String(answerId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get review by id in Application with a given id
         * @param {number} id The id of the application to get the review from
         * @param {number} reviewId The id of the review to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneReviewUsingGET(id: number, reviewId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneReviewUsingGET.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling getOneReviewUsingGET.');
            }
            const localVarPath = `/applications/{id}/reviews/{reviewId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Application by id
         * @param {number} id The id of the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationControllerApi - functional programming interface
 * @export
 */
export const ApplicationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds an answer to an application with a given id
         * @param {number} id The id of the application to add the answer to
         * @param {AnswerDTO} name The name of the answer to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAnswerUsingPOST(id: number, name: AnswerDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).addAnswerUsingPOST(id, name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Adds a review to an application with a given id
         * @param {number} id The id of the application to add the review to
         * @param {ReviewDTO} reviewId The id of the review to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewUsingPOST(id: number, reviewId: ReviewDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).addReviewUsingPOST(id, reviewId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete answer by name in Application with a given id
         * @param {number} answerId The id of the answer to get
         * @param {number} id The id of the application to delete the answer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnswerUsingDELETE(answerId: number, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).deleteAnswerUsingDELETE(answerId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete review by id in Application with a given id
         * @param {number} id The id of the application to delete the review from
         * @param {number} reviewId The id of the review to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewUsingDELETE(id: number, reviewId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).deleteReviewUsingDELETE(id, reviewId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit answer by name in Application with a given id
         * @param {number} id The id of the application to edit the answer from
         * @param {AnswerDTO} name The name of the answer to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAnswerUsingPUT(id: number, name: AnswerDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).editAnswerUsingPUT(id, name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit Application by id
         * @param {ApplicationDTO} app app
         * @param {number} id The id of the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editApplicationUsingPUT(app: ApplicationDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).editApplicationUsingPUT(app, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit review by id in Application with a given id
         * @param {number} id The id of the application to edit the review from
         * @param {ReviewDTO} reviewId The id of the review to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReviewUsingPUT(id: number, reviewId: ReviewDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).editReviewUsingPUT(id, reviewId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Answers in Application with a given id
         * @param {number} id The id of the application to get the answers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAnswersUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).getAllAnswersUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Reviews in Application with a given id
         * @param {number} id The id of the application to get all Reviews from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReviewsFromApplicationUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).getAllReviewsFromApplicationUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Applications
         * @param {string} [filter] filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(filter?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).getAllUsingGET(filter, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get answer by name in Application with a given id
         * @param {number} answerId The id of the answer to get
         * @param {number} id The id of the application to get the answer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneAnswerUsingGET(answerId: number, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewDTO> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).getOneAnswerUsingGET(answerId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get review by id in Application with a given id
         * @param {number} id The id of the application to get the review from
         * @param {number} reviewId The id of the review to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneReviewUsingGET(id: number, reviewId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewDTO> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).getOneReviewUsingGET(id, reviewId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get Application by id
         * @param {number} id The id of the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApplicationDTO> {
            const localVarFetchArgs = ApplicationControllerApiFetchParamCreator(configuration).getOneUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ApplicationControllerApi - factory interface
 * @export
 */
export const ApplicationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Adds an answer to an application with a given id
         * @param {number} id The id of the application to add the answer to
         * @param {AnswerDTO} name The name of the answer to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAnswerUsingPOST(id: number, name: AnswerDTO, options?: any) {
            return ApplicationControllerApiFp(configuration).addAnswerUsingPOST(id, name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Adds a review to an application with a given id
         * @param {number} id The id of the application to add the review to
         * @param {ReviewDTO} reviewId The id of the review to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewUsingPOST(id: number, reviewId: ReviewDTO, options?: any) {
            return ApplicationControllerApiFp(configuration).addReviewUsingPOST(id, reviewId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete answer by name in Application with a given id
         * @param {number} answerId The id of the answer to get
         * @param {number} id The id of the application to delete the answer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnswerUsingDELETE(answerId: number, id: number, options?: any) {
            return ApplicationControllerApiFp(configuration).deleteAnswerUsingDELETE(answerId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete review by id in Application with a given id
         * @param {number} id The id of the application to delete the review from
         * @param {number} reviewId The id of the review to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewUsingDELETE(id: number, reviewId: number, options?: any) {
            return ApplicationControllerApiFp(configuration).deleteReviewUsingDELETE(id, reviewId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit answer by name in Application with a given id
         * @param {number} id The id of the application to edit the answer from
         * @param {AnswerDTO} name The name of the answer to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAnswerUsingPUT(id: number, name: AnswerDTO, options?: any) {
            return ApplicationControllerApiFp(configuration).editAnswerUsingPUT(id, name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit Application by id
         * @param {ApplicationDTO} app app
         * @param {number} id The id of the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editApplicationUsingPUT(app: ApplicationDTO, id: number, options?: any) {
            return ApplicationControllerApiFp(configuration).editApplicationUsingPUT(app, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit review by id in Application with a given id
         * @param {number} id The id of the application to edit the review from
         * @param {ReviewDTO} reviewId The id of the review to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReviewUsingPUT(id: number, reviewId: ReviewDTO, options?: any) {
            return ApplicationControllerApiFp(configuration).editReviewUsingPUT(id, reviewId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Answers in Application with a given id
         * @param {number} id The id of the application to get the answers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAnswersUsingGET(id: number, options?: any) {
            return ApplicationControllerApiFp(configuration).getAllAnswersUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Reviews in Application with a given id
         * @param {number} id The id of the application to get all Reviews from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReviewsFromApplicationUsingGET(id: number, options?: any) {
            return ApplicationControllerApiFp(configuration).getAllReviewsFromApplicationUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Applications
         * @param {string} [filter] filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(filter?: string, options?: any) {
            return ApplicationControllerApiFp(configuration).getAllUsingGET(filter, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get answer by name in Application with a given id
         * @param {number} answerId The id of the answer to get
         * @param {number} id The id of the application to get the answer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneAnswerUsingGET(answerId: number, id: number, options?: any) {
            return ApplicationControllerApiFp(configuration).getOneAnswerUsingGET(answerId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get review by id in Application with a given id
         * @param {number} id The id of the application to get the review from
         * @param {number} reviewId The id of the review to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneReviewUsingGET(id: number, reviewId: number, options?: any) {
            return ApplicationControllerApiFp(configuration).getOneReviewUsingGET(id, reviewId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get Application by id
         * @param {number} id The id of the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET(id: number, options?: any) {
            return ApplicationControllerApiFp(configuration).getOneUsingGET(id, options)(fetch, basePath);
        },
    };
};

/**
 * ApplicationControllerApi - object-oriented interface
 * @export
 * @class ApplicationControllerApi
 * @extends {BaseAPI}
 */
export class ApplicationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Adds an answer to an application with a given id
     * @param {number} id The id of the application to add the answer to
     * @param {AnswerDTO} name The name of the answer to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public addAnswerUsingPOST(id: number, name: AnswerDTO, options?: any) {
        return ApplicationControllerApiFp(this.configuration).addAnswerUsingPOST(id, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Adds a review to an application with a given id
     * @param {number} id The id of the application to add the review to
     * @param {ReviewDTO} reviewId The id of the review to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public addReviewUsingPOST(id: number, reviewId: ReviewDTO, options?: any) {
        return ApplicationControllerApiFp(this.configuration).addReviewUsingPOST(id, reviewId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete answer by name in Application with a given id
     * @param {number} answerId The id of the answer to get
     * @param {number} id The id of the application to delete the answer from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public deleteAnswerUsingDELETE(answerId: number, id: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).deleteAnswerUsingDELETE(answerId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete review by id in Application with a given id
     * @param {number} id The id of the application to delete the review from
     * @param {number} reviewId The id of the review to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public deleteReviewUsingDELETE(id: number, reviewId: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).deleteReviewUsingDELETE(id, reviewId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit answer by name in Application with a given id
     * @param {number} id The id of the application to edit the answer from
     * @param {AnswerDTO} name The name of the answer to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public editAnswerUsingPUT(id: number, name: AnswerDTO, options?: any) {
        return ApplicationControllerApiFp(this.configuration).editAnswerUsingPUT(id, name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit Application by id
     * @param {ApplicationDTO} app app
     * @param {number} id The id of the application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public editApplicationUsingPUT(app: ApplicationDTO, id: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).editApplicationUsingPUT(app, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit review by id in Application with a given id
     * @param {number} id The id of the application to edit the review from
     * @param {ReviewDTO} reviewId The id of the review to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public editReviewUsingPUT(id: number, reviewId: ReviewDTO, options?: any) {
        return ApplicationControllerApiFp(this.configuration).editReviewUsingPUT(id, reviewId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Answers in Application with a given id
     * @param {number} id The id of the application to get the answers from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public getAllAnswersUsingGET(id: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).getAllAnswersUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Reviews in Application with a given id
     * @param {number} id The id of the application to get all Reviews from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public getAllReviewsFromApplicationUsingGET(id: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).getAllReviewsFromApplicationUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Applications
     * @param {string} [filter] filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public getAllUsingGET(filter?: string, options?: any) {
        return ApplicationControllerApiFp(this.configuration).getAllUsingGET(filter, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get answer by name in Application with a given id
     * @param {number} answerId The id of the answer to get
     * @param {number} id The id of the application to get the answer from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public getOneAnswerUsingGET(answerId: number, id: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).getOneAnswerUsingGET(answerId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get review by id in Application with a given id
     * @param {number} id The id of the application to get the review from
     * @param {number} reviewId The id of the review to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public getOneReviewUsingGET(id: number, reviewId: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).getOneReviewUsingGET(id, reviewId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get Application by id
     * @param {number} id The id of the application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationControllerApi
     */
    public getOneUsingGET(id: number, options?: any) {
        return ApplicationControllerApiFp(this.configuration).getOneUsingGET(id, options)(this.fetch, this.basePath);
    }

}

/**
 * CvRequirementControllerApi - fetch parameter creator
 * @export
 */
export const CvRequirementControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add CVRequirement by id
         * @param {CVRequirementDTO} requirement requirement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRequirementUsingPOST(requirement: CVRequirementDTO, options: any = {}): FetchArgs {
            // verify required parameter 'requirement' is not null or undefined
            if (requirement === null || requirement === undefined) {
                throw new RequiredError('requirement','Required parameter requirement was null or undefined when calling addRequirementUsingPOST.');
            }
            const localVarPath = `/cvrequirements`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CVRequirementDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requirement || {}) : (requirement || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete CVRequirement by id
         * @param {number} id The id of the CVRequirement to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequirementUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRequirementUsingDELETE.');
            }
            const localVarPath = `/cvrequirements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit CVRequirement by id
         * @param {number} id The id of the CVRequirement to edit
         * @param {CVRequirementDTO} requirement requirement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRequirementUsingPUT(id: number, requirement: CVRequirementDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editRequirementUsingPUT.');
            }
            // verify required parameter 'requirement' is not null or undefined
            if (requirement === null || requirement === undefined) {
                throw new RequiredError('requirement','Required parameter requirement was null or undefined when calling editRequirementUsingPUT.');
            }
            const localVarPath = `/cvrequirements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CVRequirementDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(requirement || {}) : (requirement || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all CVRequirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1(options: any = {}): FetchArgs {
            const localVarPath = `/cvrequirements`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CVRequirement by id
         * @param {number} id The id of the CVRequirement to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET1.');
            }
            const localVarPath = `/cvrequirements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CvRequirementControllerApi - functional programming interface
 * @export
 */
export const CvRequirementControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add CVRequirement by id
         * @param {CVRequirementDTO} requirement requirement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRequirementUsingPOST(requirement: CVRequirementDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CvRequirementControllerApiFetchParamCreator(configuration).addRequirementUsingPOST(requirement, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete CVRequirement by id
         * @param {number} id The id of the CVRequirement to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequirementUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CvRequirementControllerApiFetchParamCreator(configuration).deleteRequirementUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit CVRequirement by id
         * @param {number} id The id of the CVRequirement to edit
         * @param {CVRequirementDTO} requirement requirement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRequirementUsingPUT(id: number, requirement: CVRequirementDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CvRequirementControllerApiFetchParamCreator(configuration).editRequirementUsingPUT(id, requirement, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all CVRequirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = CvRequirementControllerApiFetchParamCreator(configuration).getAllUsingGET1(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get CVRequirement by id
         * @param {number} id The id of the CVRequirement to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CVRequirementDTO> {
            const localVarFetchArgs = CvRequirementControllerApiFetchParamCreator(configuration).getOneUsingGET1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CvRequirementControllerApi - factory interface
 * @export
 */
export const CvRequirementControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add CVRequirement by id
         * @param {CVRequirementDTO} requirement requirement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRequirementUsingPOST(requirement: CVRequirementDTO, options?: any) {
            return CvRequirementControllerApiFp(configuration).addRequirementUsingPOST(requirement, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete CVRequirement by id
         * @param {number} id The id of the CVRequirement to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequirementUsingDELETE(id: number, options?: any) {
            return CvRequirementControllerApiFp(configuration).deleteRequirementUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit CVRequirement by id
         * @param {number} id The id of the CVRequirement to edit
         * @param {CVRequirementDTO} requirement requirement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRequirementUsingPUT(id: number, requirement: CVRequirementDTO, options?: any) {
            return CvRequirementControllerApiFp(configuration).editRequirementUsingPUT(id, requirement, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all CVRequirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET1(options?: any) {
            return CvRequirementControllerApiFp(configuration).getAllUsingGET1(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get CVRequirement by id
         * @param {number} id The id of the CVRequirement to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET1(id: number, options?: any) {
            return CvRequirementControllerApiFp(configuration).getOneUsingGET1(id, options)(fetch, basePath);
        },
    };
};

/**
 * CvRequirementControllerApi - object-oriented interface
 * @export
 * @class CvRequirementControllerApi
 * @extends {BaseAPI}
 */
export class CvRequirementControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add CVRequirement by id
     * @param {CVRequirementDTO} requirement requirement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvRequirementControllerApi
     */
    public addRequirementUsingPOST(requirement: CVRequirementDTO, options?: any) {
        return CvRequirementControllerApiFp(this.configuration).addRequirementUsingPOST(requirement, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete CVRequirement by id
     * @param {number} id The id of the CVRequirement to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvRequirementControllerApi
     */
    public deleteRequirementUsingDELETE(id: number, options?: any) {
        return CvRequirementControllerApiFp(this.configuration).deleteRequirementUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit CVRequirement by id
     * @param {number} id The id of the CVRequirement to edit
     * @param {CVRequirementDTO} requirement requirement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvRequirementControllerApi
     */
    public editRequirementUsingPUT(id: number, requirement: CVRequirementDTO, options?: any) {
        return CvRequirementControllerApiFp(this.configuration).editRequirementUsingPUT(id, requirement, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all CVRequirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvRequirementControllerApi
     */
    public getAllUsingGET1(options?: any) {
        return CvRequirementControllerApiFp(this.configuration).getAllUsingGET1(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get CVRequirement by id
     * @param {number} id The id of the CVRequirement to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvRequirementControllerApi
     */
    public getOneUsingGET1(id: number, options?: any) {
        return CvRequirementControllerApiFp(this.configuration).getOneUsingGET1(id, options)(this.fetch, this.basePath);
    }

}

/**
 * GrantCallControllerApi - fetch parameter creator
 * @export
 */
export const GrantCallControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an application to a grant call with a given id
         * @param {ApplicationDTO} app app
         * @param {number} id The id of the grant call to add the application to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationUsingPOST(app: ApplicationDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'app' is not null or undefined
            if (app === null || app === undefined) {
                throw new RequiredError('app','Required parameter app was null or undefined when calling addApplicationUsingPOST.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addApplicationUsingPOST.');
            }
            const localVarPath = `/calls/{id}/applications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApplicationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(app || {}) : (app || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new grant call
         * @param {GrantCallDTO} call call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCallUsingPOST(call: GrantCallDTO, options: any = {}): FetchArgs {
            // verify required parameter 'call' is not null or undefined
            if (call === null || call === undefined) {
                throw new RequiredError('call','Required parameter call was null or undefined when calling addCallUsingPOST.');
            }
            const localVarPath = `/calls`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GrantCallDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(call || {}) : (call || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add data item to grant call with a given id
         * @param {DataItemDTO} dataItem dataItem
         * @param {number} id The id of the grant call to add the data item to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemUsingPOST(dataItem: DataItemDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'dataItem' is not null or undefined
            if (dataItem === null || dataItem === undefined) {
                throw new RequiredError('dataItem','Required parameter dataItem was null or undefined when calling addDataItemUsingPOST.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addDataItemUsingPOST.');
            }
            const localVarPath = `/calls/{id}/dataitems`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DataItemDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(dataItem || {}) : (dataItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add panel chair to the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the reviewer to be set as panel chair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPanelChairUsingPOST(id: number, reviewerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addPanelChairUsingPOST.');
            }
            // verify required parameter 'reviewerId' is not null or undefined
            if (reviewerId === null || reviewerId === undefined) {
                throw new RequiredError('reviewerId','Required parameter reviewerId was null or undefined when calling addPanelChairUsingPOST.');
            }
            const localVarPath = `/calls/{id}/panel/chair/{reviewerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"reviewerId"}}`, encodeURIComponent(String(reviewerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add reviewer to the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the reviewer to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerToPanelUsingPOST(id: number, reviewerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addReviewerToPanelUsingPOST.');
            }
            // verify required parameter 'reviewerId' is not null or undefined
            if (reviewerId === null || reviewerId === undefined) {
                throw new RequiredError('reviewerId','Required parameter reviewerId was null or undefined when calling addReviewerToPanelUsingPOST.');
            }
            const localVarPath = `/calls/{id}/panel/reviewers/{reviewerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"reviewerId"}}`, encodeURIComponent(String(reviewerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Application by id
         * @param {number} appId The id of the application to delete
         * @param {number} id The id of the grant call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationUsingDELETE(appId: number, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling deleteApplicationUsingDELETE.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteApplicationUsingDELETE.');
            }
            const localVarPath = `/calls/{id}/applications/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Grant Call with given id
         * @param {number} id The id of the grant call to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCallUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCallUsingDELETE.');
            }
            const localVarPath = `/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete data item from grant call with a given id
         * @param {number} dataItemId The id of the data item being deleted
         * @param {number} id The id of the grant call to delete the data item from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemUsingDELETE(dataItemId: number, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'dataItemId' is not null or undefined
            if (dataItemId === null || dataItemId === undefined) {
                throw new RequiredError('dataItemId','Required parameter dataItemId was null or undefined when calling deleteDataItemUsingDELETE.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDataItemUsingDELETE.');
            }
            const localVarPath = `/calls/{id}/dataitems/{dataItemId}`
                .replace(`{${"dataItemId"}}`, encodeURIComponent(String(dataItemId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove panel chair from the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to delete a reviewer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePanelChairUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePanelChairUsingDELETE.');
            }
            const localVarPath = `/calls/{id}/panel/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a reviewer from the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to delete a reviewer from
         * @param {number} reviewerId The id of the reviewer being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerFromPanelUsingDELETE(id: number, reviewerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteReviewerFromPanelUsingDELETE.');
            }
            // verify required parameter 'reviewerId' is not null or undefined
            if (reviewerId === null || reviewerId === undefined) {
                throw new RequiredError('reviewerId','Required parameter reviewerId was null or undefined when calling deleteReviewerFromPanelUsingDELETE.');
            }
            const localVarPath = `/calls/{id}/panel/reviewers/{reviewerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"reviewerId"}}`, encodeURIComponent(String(reviewerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Grant Call with given id
         * @param {GrantCallDTO} call call
         * @param {number} id The id of the grant call to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCallUsingPUT(call: GrantCallDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'call' is not null or undefined
            if (call === null || call === undefined) {
                throw new RequiredError('call','Required parameter call was null or undefined when calling editCallUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editCallUsingPUT.');
            }
            const localVarPath = `/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GrantCallDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(call || {}) : (call || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit panel chair in the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the new panel chair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPanelChairUsingPUT(id: number, reviewerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editPanelChairUsingPUT.');
            }
            // verify required parameter 'reviewerId' is not null or undefined
            if (reviewerId === null || reviewerId === undefined) {
                throw new RequiredError('reviewerId','Required parameter reviewerId was null or undefined when calling editPanelChairUsingPUT.');
            }
            const localVarPath = `/calls/{id}/panel/reviewers/{reviewerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"reviewerId"}}`, encodeURIComponent(String(reviewerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all applications in grant call with a given id
         * @param {number} id The id of the grant call to get the applications from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationsFromGrantCallUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllApplicationsFromGrantCallUsingGET.');
            }
            const localVarPath = `/calls/{id}/applications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Data Items in Grant Call with a given id
         * @param {number} id The id of the grant call to get the data items from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDataItemsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllDataItemsUsingGET.');
            }
            const localVarPath = `/calls/{id}/dataitems`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all open Grant Calls. Grant calls are open if now() is between their start and end times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOpenUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/calls/open`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Grant Calls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2(options: any = {}): FetchArgs {
            const localVarPath = `/calls`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data item by name in grant call with a given id
         * @param {number} dataItemId The id of the data item to get
         * @param {number} id The id of the grant call to get the data item from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDataItemUsingGET(dataItemId: number, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'dataItemId' is not null or undefined
            if (dataItemId === null || dataItemId === undefined) {
                throw new RequiredError('dataItemId','Required parameter dataItemId was null or undefined when calling getOneDataItemUsingGET.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneDataItemUsingGET.');
            }
            const localVarPath = `/calls/{id}/dataitems/{dataItemId}`
                .replace(`{${"dataItemId"}}`, encodeURIComponent(String(dataItemId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Grant Call by id
         * @param {number} id The id of the grant call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET2(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET2.');
            }
            const localVarPath = `/calls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to get the panel from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPanelFromGrantCallUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPanelFromGrantCallUsingGET.');
            }
            const localVarPath = `/calls/{id}/panel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all reviewers in the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to get the assigned reviewers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewersUsingGET.');
            }
            const localVarPath = `/calls/{id}/panel/reviewers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GrantCallControllerApi - functional programming interface
 * @export
 */
export const GrantCallControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an application to a grant call with a given id
         * @param {ApplicationDTO} app app
         * @param {number} id The id of the grant call to add the application to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationUsingPOST(app: ApplicationDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).addApplicationUsingPOST(app, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add new grant call
         * @param {GrantCallDTO} call call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCallUsingPOST(call: GrantCallDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).addCallUsingPOST(call, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add data item to grant call with a given id
         * @param {DataItemDTO} dataItem dataItem
         * @param {number} id The id of the grant call to add the data item to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemUsingPOST(dataItem: DataItemDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).addDataItemUsingPOST(dataItem, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add panel chair to the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the reviewer to be set as panel chair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPanelChairUsingPOST(id: number, reviewerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).addPanelChairUsingPOST(id, reviewerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add reviewer to the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the reviewer to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerToPanelUsingPOST(id: number, reviewerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).addReviewerToPanelUsingPOST(id, reviewerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Application by id
         * @param {number} appId The id of the application to delete
         * @param {number} id The id of the grant call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationUsingDELETE(appId: number, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).deleteApplicationUsingDELETE(appId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Grant Call with given id
         * @param {number} id The id of the grant call to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCallUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).deleteCallUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete data item from grant call with a given id
         * @param {number} dataItemId The id of the data item being deleted
         * @param {number} id The id of the grant call to delete the data item from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemUsingDELETE(dataItemId: number, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).deleteDataItemUsingDELETE(dataItemId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove panel chair from the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to delete a reviewer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePanelChairUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).deletePanelChairUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove a reviewer from the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to delete a reviewer from
         * @param {number} reviewerId The id of the reviewer being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerFromPanelUsingDELETE(id: number, reviewerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).deleteReviewerFromPanelUsingDELETE(id, reviewerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit Grant Call with given id
         * @param {GrantCallDTO} call call
         * @param {number} id The id of the grant call to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCallUsingPUT(call: GrantCallDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).editCallUsingPUT(call, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit panel chair in the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the new panel chair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPanelChairUsingPUT(id: number, reviewerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).editPanelChairUsingPUT(id, reviewerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all applications in grant call with a given id
         * @param {number} id The id of the grant call to get the applications from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationsFromGrantCallUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getAllApplicationsFromGrantCallUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Data Items in Grant Call with a given id
         * @param {number} id The id of the grant call to get the data items from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDataItemsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getAllDataItemsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all open Grant Calls. Grant calls are open if now() is between their start and end times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOpenUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getAllOpenUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Grant Calls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getAllUsingGET2(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get data item by name in grant call with a given id
         * @param {number} dataItemId The id of the data item to get
         * @param {number} id The id of the grant call to get the data item from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDataItemUsingGET(dataItemId: number, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataItemDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getOneDataItemUsingGET(dataItemId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get Grant Call by id
         * @param {number} id The id of the grant call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET2(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GrantCallDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getOneUsingGET2(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to get the panel from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPanelFromGrantCallUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PanelDTO> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getPanelFromGrantCallUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all reviewers in the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to get the assigned reviewers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = GrantCallControllerApiFetchParamCreator(configuration).getReviewersUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GrantCallControllerApi - factory interface
 * @export
 */
export const GrantCallControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add an application to a grant call with a given id
         * @param {ApplicationDTO} app app
         * @param {number} id The id of the grant call to add the application to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationUsingPOST(app: ApplicationDTO, id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).addApplicationUsingPOST(app, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add new grant call
         * @param {GrantCallDTO} call call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCallUsingPOST(call: GrantCallDTO, options?: any) {
            return GrantCallControllerApiFp(configuration).addCallUsingPOST(call, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add data item to grant call with a given id
         * @param {DataItemDTO} dataItem dataItem
         * @param {number} id The id of the grant call to add the data item to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataItemUsingPOST(dataItem: DataItemDTO, id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).addDataItemUsingPOST(dataItem, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add panel chair to the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the reviewer to be set as panel chair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPanelChairUsingPOST(id: number, reviewerId: number, options?: any) {
            return GrantCallControllerApiFp(configuration).addPanelChairUsingPOST(id, reviewerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add reviewer to the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the reviewer to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerToPanelUsingPOST(id: number, reviewerId: number, options?: any) {
            return GrantCallControllerApiFp(configuration).addReviewerToPanelUsingPOST(id, reviewerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Application by id
         * @param {number} appId The id of the application to delete
         * @param {number} id The id of the grant call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationUsingDELETE(appId: number, id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).deleteApplicationUsingDELETE(appId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Grant Call with given id
         * @param {number} id The id of the grant call to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCallUsingDELETE(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).deleteCallUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete data item from grant call with a given id
         * @param {number} dataItemId The id of the data item being deleted
         * @param {number} id The id of the grant call to delete the data item from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataItemUsingDELETE(dataItemId: number, id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).deleteDataItemUsingDELETE(dataItemId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove panel chair from the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to delete a reviewer from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePanelChairUsingDELETE(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).deletePanelChairUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove a reviewer from the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to delete a reviewer from
         * @param {number} reviewerId The id of the reviewer being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerFromPanelUsingDELETE(id: number, reviewerId: number, options?: any) {
            return GrantCallControllerApiFp(configuration).deleteReviewerFromPanelUsingDELETE(id, reviewerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit Grant Call with given id
         * @param {GrantCallDTO} call call
         * @param {number} id The id of the grant call to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCallUsingPUT(call: GrantCallDTO, id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).editCallUsingPUT(call, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit panel chair in the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to add a reviewer to
         * @param {number} reviewerId The id of the new panel chair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPanelChairUsingPUT(id: number, reviewerId: number, options?: any) {
            return GrantCallControllerApiFp(configuration).editPanelChairUsingPUT(id, reviewerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all applications in grant call with a given id
         * @param {number} id The id of the grant call to get the applications from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationsFromGrantCallUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getAllApplicationsFromGrantCallUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Data Items in Grant Call with a given id
         * @param {number} id The id of the grant call to get the data items from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDataItemsUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getAllDataItemsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all open Grant Calls. Grant calls are open if now() is between their start and end times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOpenUsingGET(options?: any) {
            return GrantCallControllerApiFp(configuration).getAllOpenUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Grant Calls
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET2(options?: any) {
            return GrantCallControllerApiFp(configuration).getAllUsingGET2(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get data item by name in grant call with a given id
         * @param {number} dataItemId The id of the data item to get
         * @param {number} id The id of the grant call to get the data item from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDataItemUsingGET(dataItemId: number, id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getOneDataItemUsingGET(dataItemId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get Grant Call by id
         * @param {number} id The id of the grant call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET2(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getOneUsingGET2(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to get the panel from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPanelFromGrantCallUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getPanelFromGrantCallUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all reviewers in the panel assigned to a grant call with given id
         * @param {number} id The id of the grant call to get the assigned reviewers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET(id: number, options?: any) {
            return GrantCallControllerApiFp(configuration).getReviewersUsingGET(id, options)(fetch, basePath);
        },
    };
};

/**
 * GrantCallControllerApi - object-oriented interface
 * @export
 * @class GrantCallControllerApi
 * @extends {BaseAPI}
 */
export class GrantCallControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add an application to a grant call with a given id
     * @param {ApplicationDTO} app app
     * @param {number} id The id of the grant call to add the application to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public addApplicationUsingPOST(app: ApplicationDTO, id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).addApplicationUsingPOST(app, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add new grant call
     * @param {GrantCallDTO} call call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public addCallUsingPOST(call: GrantCallDTO, options?: any) {
        return GrantCallControllerApiFp(this.configuration).addCallUsingPOST(call, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add data item to grant call with a given id
     * @param {DataItemDTO} dataItem dataItem
     * @param {number} id The id of the grant call to add the data item to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public addDataItemUsingPOST(dataItem: DataItemDTO, id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).addDataItemUsingPOST(dataItem, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add panel chair to the panel assigned to a grant call with given id
     * @param {number} id The id of the grant call to add a reviewer to
     * @param {number} reviewerId The id of the reviewer to be set as panel chair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public addPanelChairUsingPOST(id: number, reviewerId: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).addPanelChairUsingPOST(id, reviewerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add reviewer to the panel assigned to a grant call with given id
     * @param {number} id The id of the grant call to add a reviewer to
     * @param {number} reviewerId The id of the reviewer to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public addReviewerToPanelUsingPOST(id: number, reviewerId: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).addReviewerToPanelUsingPOST(id, reviewerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Application by id
     * @param {number} appId The id of the application to delete
     * @param {number} id The id of the grant call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public deleteApplicationUsingDELETE(appId: number, id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).deleteApplicationUsingDELETE(appId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Grant Call with given id
     * @param {number} id The id of the grant call to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public deleteCallUsingDELETE(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).deleteCallUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete data item from grant call with a given id
     * @param {number} dataItemId The id of the data item being deleted
     * @param {number} id The id of the grant call to delete the data item from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public deleteDataItemUsingDELETE(dataItemId: number, id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).deleteDataItemUsingDELETE(dataItemId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove panel chair from the panel assigned to a grant call with given id
     * @param {number} id The id of the grant call to delete a reviewer from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public deletePanelChairUsingDELETE(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).deletePanelChairUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove a reviewer from the panel assigned to a grant call with given id
     * @param {number} id The id of the grant call to delete a reviewer from
     * @param {number} reviewerId The id of the reviewer being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public deleteReviewerFromPanelUsingDELETE(id: number, reviewerId: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).deleteReviewerFromPanelUsingDELETE(id, reviewerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit Grant Call with given id
     * @param {GrantCallDTO} call call
     * @param {number} id The id of the grant call to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public editCallUsingPUT(call: GrantCallDTO, id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).editCallUsingPUT(call, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit panel chair in the panel assigned to a grant call with given id
     * @param {number} id The id of the grant call to add a reviewer to
     * @param {number} reviewerId The id of the new panel chair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public editPanelChairUsingPUT(id: number, reviewerId: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).editPanelChairUsingPUT(id, reviewerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all applications in grant call with a given id
     * @param {number} id The id of the grant call to get the applications from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getAllApplicationsFromGrantCallUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getAllApplicationsFromGrantCallUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Data Items in Grant Call with a given id
     * @param {number} id The id of the grant call to get the data items from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getAllDataItemsUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getAllDataItemsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all open Grant Calls. Grant calls are open if now() is between their start and end times
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getAllOpenUsingGET(options?: any) {
        return GrantCallControllerApiFp(this.configuration).getAllOpenUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Grant Calls
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getAllUsingGET2(options?: any) {
        return GrantCallControllerApiFp(this.configuration).getAllUsingGET2(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get data item by name in grant call with a given id
     * @param {number} dataItemId The id of the data item to get
     * @param {number} id The id of the grant call to get the data item from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getOneDataItemUsingGET(dataItemId: number, id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getOneDataItemUsingGET(dataItemId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get Grant Call by id
     * @param {number} id The id of the grant call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getOneUsingGET2(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getOneUsingGET2(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get panel assigned to a grant call with given id
     * @param {number} id The id of the grant call to get the panel from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getPanelFromGrantCallUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getPanelFromGrantCallUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all reviewers in the panel assigned to a grant call with given id
     * @param {number} id The id of the grant call to get the assigned reviewers from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantCallControllerApi
     */
    public getReviewersUsingGET(id: number, options?: any) {
        return GrantCallControllerApiFp(this.configuration).getReviewersUsingGET(id, options)(this.fetch, this.basePath);
    }

}

/**
 * InstitutionControllerApi - fetch parameter creator
 * @export
 */
export const InstitutionControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Institution
         * @param {OrganizationDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstitutionUsingPOST(institution: OrganizationDTO, options: any = {}): FetchArgs {
            // verify required parameter 'institution' is not null or undefined
            if (institution === null || institution === undefined) {
                throw new RequiredError('institution','Required parameter institution was null or undefined when calling addInstitutionUsingPOST.');
            }
            const localVarPath = `/institutions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrganizationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(institution || {}) : (institution || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Reviewer to Institution with a given id
         * @param {number} id The id of the institution to add the reviewer to
         * @param {UserDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerUsingPOST(id: number, reviewer: UserDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addReviewerUsingPOST.');
            }
            // verify required parameter 'reviewer' is not null or undefined
            if (reviewer === null || reviewer === undefined) {
                throw new RequiredError('reviewer','Required parameter reviewer was null or undefined when calling addReviewerUsingPOST.');
            }
            const localVarPath = `/institutions/{id}/reviewers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reviewer || {}) : (reviewer || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Student to Institution with a given id
         * @param {number} id The id of the institution to add the student to
         * @param {UserDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentUsingPOST(id: number, student: UserDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addStudentUsingPOST.');
            }
            // verify required parameter 'student' is not null or undefined
            if (student === null || student === undefined) {
                throw new RequiredError('student','Required parameter student was null or undefined when calling addStudentUsingPOST.');
            }
            const localVarPath = `/institutions/{id}/students`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(student || {}) : (student || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Institution by id
         * @param {number} id The id of the institution being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstitutionUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteInstitutionUsingDELETE.');
            }
            const localVarPath = `/institutions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Institution with given id
         * @param {number} id The id of the institution being edited
         * @param {OrganizationDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editInstitutionUsingPUT(id: number, institution: OrganizationDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editInstitutionUsingPUT.');
            }
            // verify required parameter 'institution' is not null or undefined
            if (institution === null || institution === undefined) {
                throw new RequiredError('institution','Required parameter institution was null or undefined when calling editInstitutionUsingPUT.');
            }
            const localVarPath = `/institutions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrganizationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(institution || {}) : (institution || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Institutions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET3(options: any = {}): FetchArgs {
            const localVarPath = `/institutions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Institution by id
         * @param {number} id The id of the institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET3.');
            }
            const localVarPath = `/institutions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Reviewers in Institution with a given id
         * @param {number} id The id of the institution to get all reviewers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewersUsingGET1.');
            }
            const localVarPath = `/institutions/{id}/reviewers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Students in Institution with a given id
         * @param {number} id The id of the institution to get all students from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentsUsingGET.');
            }
            const localVarPath = `/institutions/{id}/students`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstitutionControllerApi - functional programming interface
 * @export
 */
export const InstitutionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new Institution
         * @param {OrganizationDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstitutionUsingPOST(institution: OrganizationDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).addInstitutionUsingPOST(institution, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add new Reviewer to Institution with a given id
         * @param {number} id The id of the institution to add the reviewer to
         * @param {UserDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerUsingPOST(id: number, reviewer: UserDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).addReviewerUsingPOST(id, reviewer, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add new Student to Institution with a given id
         * @param {number} id The id of the institution to add the student to
         * @param {UserDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentUsingPOST(id: number, student: UserDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).addStudentUsingPOST(id, student, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Institution by id
         * @param {number} id The id of the institution being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstitutionUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).deleteInstitutionUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit Institution with given id
         * @param {number} id The id of the institution being edited
         * @param {OrganizationDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editInstitutionUsingPUT(id: number, institution: OrganizationDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).editInstitutionUsingPUT(id, institution, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Institutions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET3(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getAllUsingGET3(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get Institution by id
         * @param {number} id The id of the institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrganizationDTO> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getOneUsingGET3(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Reviewers in Institution with a given id
         * @param {number} id The id of the institution to get all reviewers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getReviewersUsingGET1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Students in Institution with a given id
         * @param {number} id The id of the institution to get all students from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = InstitutionControllerApiFetchParamCreator(configuration).getStudentsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InstitutionControllerApi - factory interface
 * @export
 */
export const InstitutionControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a new Institution
         * @param {OrganizationDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstitutionUsingPOST(institution: OrganizationDTO, options?: any) {
            return InstitutionControllerApiFp(configuration).addInstitutionUsingPOST(institution, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add new Reviewer to Institution with a given id
         * @param {number} id The id of the institution to add the reviewer to
         * @param {UserDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReviewerUsingPOST(id: number, reviewer: UserDTO, options?: any) {
            return InstitutionControllerApiFp(configuration).addReviewerUsingPOST(id, reviewer, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add new Student to Institution with a given id
         * @param {number} id The id of the institution to add the student to
         * @param {UserDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentUsingPOST(id: number, student: UserDTO, options?: any) {
            return InstitutionControllerApiFp(configuration).addStudentUsingPOST(id, student, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Institution by id
         * @param {number} id The id of the institution being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstitutionUsingDELETE(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).deleteInstitutionUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit Institution with given id
         * @param {number} id The id of the institution being edited
         * @param {OrganizationDTO} institution institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editInstitutionUsingPUT(id: number, institution: OrganizationDTO, options?: any) {
            return InstitutionControllerApiFp(configuration).editInstitutionUsingPUT(id, institution, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Institutions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET3(options?: any) {
            return InstitutionControllerApiFp(configuration).getAllUsingGET3(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get Institution by id
         * @param {number} id The id of the institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET3(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).getOneUsingGET3(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Reviewers in Institution with a given id
         * @param {number} id The id of the institution to get all reviewers from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewersUsingGET1(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).getReviewersUsingGET1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Students in Institution with a given id
         * @param {number} id The id of the institution to get all students from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentsUsingGET(id: number, options?: any) {
            return InstitutionControllerApiFp(configuration).getStudentsUsingGET(id, options)(fetch, basePath);
        },
    };
};

/**
 * InstitutionControllerApi - object-oriented interface
 * @export
 * @class InstitutionControllerApi
 * @extends {BaseAPI}
 */
export class InstitutionControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add a new Institution
     * @param {OrganizationDTO} institution institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public addInstitutionUsingPOST(institution: OrganizationDTO, options?: any) {
        return InstitutionControllerApiFp(this.configuration).addInstitutionUsingPOST(institution, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add new Reviewer to Institution with a given id
     * @param {number} id The id of the institution to add the reviewer to
     * @param {UserDTO} reviewer reviewer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public addReviewerUsingPOST(id: number, reviewer: UserDTO, options?: any) {
        return InstitutionControllerApiFp(this.configuration).addReviewerUsingPOST(id, reviewer, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add new Student to Institution with a given id
     * @param {number} id The id of the institution to add the student to
     * @param {UserDTO} student student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public addStudentUsingPOST(id: number, student: UserDTO, options?: any) {
        return InstitutionControllerApiFp(this.configuration).addStudentUsingPOST(id, student, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Institution by id
     * @param {number} id The id of the institution being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public deleteInstitutionUsingDELETE(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).deleteInstitutionUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit Institution with given id
     * @param {number} id The id of the institution being edited
     * @param {OrganizationDTO} institution institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public editInstitutionUsingPUT(id: number, institution: OrganizationDTO, options?: any) {
        return InstitutionControllerApiFp(this.configuration).editInstitutionUsingPUT(id, institution, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Institutions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getAllUsingGET3(options?: any) {
        return InstitutionControllerApiFp(this.configuration).getAllUsingGET3(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get Institution by id
     * @param {number} id The id of the institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getOneUsingGET3(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).getOneUsingGET3(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Reviewers in Institution with a given id
     * @param {number} id The id of the institution to get all reviewers from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getReviewersUsingGET1(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).getReviewersUsingGET1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Students in Institution with a given id
     * @param {number} id The id of the institution to get all students from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionControllerApi
     */
    public getStudentsUsingGET(id: number, options?: any) {
        return InstitutionControllerApiFp(this.configuration).getStudentsUsingGET(id, options)(this.fetch, this.basePath);
    }

}

/**
 * ReviewerControllerApi - fetch parameter creator
 * @export
 */
export const ReviewerControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Reviewer with id
         * @param {number} id The id of the reviewer being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteReviewerUsingDELETE.');
            }
            const localVarPath = `/reviewers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Reviewer with id
         * @param {number} id The id of the reviewer being updated
         * @param {UserDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReviewerUsingPUT(id: number, reviewer: UserDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editReviewerUsingPUT.');
            }
            // verify required parameter 'reviewer' is not null or undefined
            if (reviewer === null || reviewer === undefined) {
                throw new RequiredError('reviewer','Required parameter reviewer was null or undefined when calling editReviewerUsingPUT.');
            }
            const localVarPath = `/reviewers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reviewer || {}) : (reviewer || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Reviewers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET4(options: any = {}): FetchArgs {
            const localVarPath = `/reviewers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get panel by id in reviewer with a given id
         * @param {number} id The id of the reviewer to get the panel from
         * @param {number} panelId The panelId of the panel being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePanelUsingGET(id: number, panelId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOnePanelUsingGET.');
            }
            // verify required parameter 'panelId' is not null or undefined
            if (panelId === null || panelId === undefined) {
                throw new RequiredError('panelId','Required parameter panelId was null or undefined when calling getOnePanelUsingGET.');
            }
            const localVarPath = `/reviewers/{id}/panels/{panelId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"panelId"}}`, encodeURIComponent(String(panelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get review by id in reviewer with a given id
         * @param {number} id The id of the reviewer to get the review from
         * @param {number} reviewId The reviewId of the review being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneReviewUsingGET1(id: number, reviewId: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneReviewUsingGET1.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling getOneReviewUsingGET1.');
            }
            const localVarPath = `/reviewers/{id}/reviews/{reviewId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Reviewer by id
         * @param {number} id The id of the reviewer being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET4(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET4.');
            }
            const localVarPath = `/reviewers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Panels that Reviewer with id is assigned to
         * @param {number} id The id of the reviewer to get the panels from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPanelsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPanelsUsingGET.');
            }
            const localVarPath = `/reviewers/{id}/panels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Reviews that Reviewer with id has made
         * @param {number} id The id of the reviewer to get the reviews from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewsUsingGET.');
            }
            const localVarPath = `/reviewers/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewerControllerApi - functional programming interface
 * @export
 */
export const ReviewerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Reviewer with id
         * @param {number} id The id of the reviewer being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).deleteReviewerUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit Reviewer with id
         * @param {number} id The id of the reviewer being updated
         * @param {UserDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReviewerUsingPUT(id: number, reviewer: UserDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).editReviewerUsingPUT(id, reviewer, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Reviewers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET4(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getAllUsingGET4(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get panel by id in reviewer with a given id
         * @param {number} id The id of the reviewer to get the panel from
         * @param {number} panelId The panelId of the panel being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePanelUsingGET(id: number, panelId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PanelDTO> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getOnePanelUsingGET(id, panelId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get review by id in reviewer with a given id
         * @param {number} id The id of the reviewer to get the review from
         * @param {number} reviewId The reviewId of the review being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneReviewUsingGET1(id: number, reviewId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewDTO> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getOneReviewUsingGET1(id, reviewId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get Reviewer by id
         * @param {number} id The id of the reviewer being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET4(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDTO> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getOneUsingGET4(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Panels that Reviewer with id is assigned to
         * @param {number} id The id of the reviewer to get the panels from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPanelsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getPanelsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Reviews that Reviewer with id has made
         * @param {number} id The id of the reviewer to get the reviews from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = ReviewerControllerApiFetchParamCreator(configuration).getReviewsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReviewerControllerApi - factory interface
 * @export
 */
export const ReviewerControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete Reviewer with id
         * @param {number} id The id of the reviewer being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewerUsingDELETE(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).deleteReviewerUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit Reviewer with id
         * @param {number} id The id of the reviewer being updated
         * @param {UserDTO} reviewer reviewer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editReviewerUsingPUT(id: number, reviewer: UserDTO, options?: any) {
            return ReviewerControllerApiFp(configuration).editReviewerUsingPUT(id, reviewer, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Reviewers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET4(options?: any) {
            return ReviewerControllerApiFp(configuration).getAllUsingGET4(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get panel by id in reviewer with a given id
         * @param {number} id The id of the reviewer to get the panel from
         * @param {number} panelId The panelId of the panel being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePanelUsingGET(id: number, panelId: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getOnePanelUsingGET(id, panelId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get review by id in reviewer with a given id
         * @param {number} id The id of the reviewer to get the review from
         * @param {number} reviewId The reviewId of the review being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneReviewUsingGET1(id: number, reviewId: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getOneReviewUsingGET1(id, reviewId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get Reviewer by id
         * @param {number} id The id of the reviewer being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET4(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getOneUsingGET4(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Panels that Reviewer with id is assigned to
         * @param {number} id The id of the reviewer to get the panels from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPanelsUsingGET(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getPanelsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Reviews that Reviewer with id has made
         * @param {number} id The id of the reviewer to get the reviews from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsUsingGET(id: number, options?: any) {
            return ReviewerControllerApiFp(configuration).getReviewsUsingGET(id, options)(fetch, basePath);
        },
    };
};

/**
 * ReviewerControllerApi - object-oriented interface
 * @export
 * @class ReviewerControllerApi
 * @extends {BaseAPI}
 */
export class ReviewerControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete Reviewer with id
     * @param {number} id The id of the reviewer being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public deleteReviewerUsingDELETE(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).deleteReviewerUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit Reviewer with id
     * @param {number} id The id of the reviewer being updated
     * @param {UserDTO} reviewer reviewer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public editReviewerUsingPUT(id: number, reviewer: UserDTO, options?: any) {
        return ReviewerControllerApiFp(this.configuration).editReviewerUsingPUT(id, reviewer, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Reviewers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getAllUsingGET4(options?: any) {
        return ReviewerControllerApiFp(this.configuration).getAllUsingGET4(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get panel by id in reviewer with a given id
     * @param {number} id The id of the reviewer to get the panel from
     * @param {number} panelId The panelId of the panel being retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getOnePanelUsingGET(id: number, panelId: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getOnePanelUsingGET(id, panelId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get review by id in reviewer with a given id
     * @param {number} id The id of the reviewer to get the review from
     * @param {number} reviewId The reviewId of the review being retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getOneReviewUsingGET1(id: number, reviewId: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getOneReviewUsingGET1(id, reviewId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get Reviewer by id
     * @param {number} id The id of the reviewer being retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getOneUsingGET4(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getOneUsingGET4(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Panels that Reviewer with id is assigned to
     * @param {number} id The id of the reviewer to get the panels from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getPanelsUsingGET(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getPanelsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Reviews that Reviewer with id has made
     * @param {number} id The id of the reviewer to get the reviews from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewerControllerApi
     */
    public getReviewsUsingGET(id: number, options?: any) {
        return ReviewerControllerApiFp(this.configuration).getReviewsUsingGET(id, options)(this.fetch, this.basePath);
    }

}

/**
 * SponsorControllerApi - fetch parameter creator
 * @export
 */
export const SponsorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Sponsor with id
         * @param {OrganizationDTO} sponsor The sponsor to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSponsorUsingPOST(sponsor: OrganizationDTO, options: any = {}): FetchArgs {
            // verify required parameter 'sponsor' is not null or undefined
            if (sponsor === null || sponsor === undefined) {
                throw new RequiredError('sponsor','Required parameter sponsor was null or undefined when calling addSponsorUsingPOST.');
            }
            const localVarPath = `/sponsors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrganizationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(sponsor || {}) : (sponsor || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sponsor with reviewerNr
         * @param {number} id The id of the sponsor being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSponsorUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSponsorUsingDELETE.');
            }
            const localVarPath = `/sponsors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Sponsor with reviewerNr
         * @param {number} id The id of the sponsor being edited
         * @param {OrganizationDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSponsorUsingPUT(id: number, sponsor: OrganizationDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editSponsorUsingPUT.');
            }
            // verify required parameter 'sponsor' is not null or undefined
            if (sponsor === null || sponsor === undefined) {
                throw new RequiredError('sponsor','Required parameter sponsor was null or undefined when calling editSponsorUsingPUT.');
            }
            const localVarPath = `/sponsors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrganizationDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(sponsor || {}) : (sponsor || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Sponsors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET5(options: any = {}): FetchArgs {
            const localVarPath = `/sponsors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Grant Calls that Sponsor with id has created
         * @param {number} id The id of the sponsor to get all grant calls from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantCallsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGrantCallsUsingGET.');
            }
            const localVarPath = `/sponsors/{id}/grantcalls`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Organization by id
         * @param {number} id The id of the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET5(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET5.');
            }
            const localVarPath = `/sponsors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SponsorControllerApi - functional programming interface
 * @export
 */
export const SponsorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Sponsor with id
         * @param {OrganizationDTO} sponsor The sponsor to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSponsorUsingPOST(sponsor: OrganizationDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).addSponsorUsingPOST(sponsor, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Sponsor with reviewerNr
         * @param {number} id The id of the sponsor being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSponsorUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).deleteSponsorUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit Sponsor with reviewerNr
         * @param {number} id The id of the sponsor being edited
         * @param {OrganizationDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSponsorUsingPUT(id: number, sponsor: OrganizationDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).editSponsorUsingPUT(id, sponsor, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Sponsors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET5(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).getAllUsingGET5(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Grant Calls that Sponsor with id has created
         * @param {number} id The id of the sponsor to get all grant calls from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantCallsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).getGrantCallsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get Organization by id
         * @param {number} id The id of the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET5(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrganizationDTO> {
            const localVarFetchArgs = SponsorControllerApiFetchParamCreator(configuration).getOneUsingGET5(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SponsorControllerApi - factory interface
 * @export
 */
export const SponsorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add Sponsor with id
         * @param {OrganizationDTO} sponsor The sponsor to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSponsorUsingPOST(sponsor: OrganizationDTO, options?: any) {
            return SponsorControllerApiFp(configuration).addSponsorUsingPOST(sponsor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Sponsor with reviewerNr
         * @param {number} id The id of the sponsor being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSponsorUsingDELETE(id: number, options?: any) {
            return SponsorControllerApiFp(configuration).deleteSponsorUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit Sponsor with reviewerNr
         * @param {number} id The id of the sponsor being edited
         * @param {OrganizationDTO} sponsor sponsor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSponsorUsingPUT(id: number, sponsor: OrganizationDTO, options?: any) {
            return SponsorControllerApiFp(configuration).editSponsorUsingPUT(id, sponsor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Sponsors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET5(options?: any) {
            return SponsorControllerApiFp(configuration).getAllUsingGET5(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Grant Calls that Sponsor with id has created
         * @param {number} id The id of the sponsor to get all grant calls from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantCallsUsingGET(id: number, options?: any) {
            return SponsorControllerApiFp(configuration).getGrantCallsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get Organization by id
         * @param {number} id The id of the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET5(id: number, options?: any) {
            return SponsorControllerApiFp(configuration).getOneUsingGET5(id, options)(fetch, basePath);
        },
    };
};

/**
 * SponsorControllerApi - object-oriented interface
 * @export
 * @class SponsorControllerApi
 * @extends {BaseAPI}
 */
export class SponsorControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add Sponsor with id
     * @param {OrganizationDTO} sponsor The sponsor to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public addSponsorUsingPOST(sponsor: OrganizationDTO, options?: any) {
        return SponsorControllerApiFp(this.configuration).addSponsorUsingPOST(sponsor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Sponsor with reviewerNr
     * @param {number} id The id of the sponsor being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public deleteSponsorUsingDELETE(id: number, options?: any) {
        return SponsorControllerApiFp(this.configuration).deleteSponsorUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit Sponsor with reviewerNr
     * @param {number} id The id of the sponsor being edited
     * @param {OrganizationDTO} sponsor sponsor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public editSponsorUsingPUT(id: number, sponsor: OrganizationDTO, options?: any) {
        return SponsorControllerApiFp(this.configuration).editSponsorUsingPUT(id, sponsor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Sponsors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public getAllUsingGET5(options?: any) {
        return SponsorControllerApiFp(this.configuration).getAllUsingGET5(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Grant Calls that Sponsor with id has created
     * @param {number} id The id of the sponsor to get all grant calls from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public getGrantCallsUsingGET(id: number, options?: any) {
        return SponsorControllerApiFp(this.configuration).getGrantCallsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get Organization by id
     * @param {number} id The id of the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorControllerApi
     */
    public getOneUsingGET5(id: number, options?: any) {
        return SponsorControllerApiFp(this.configuration).getOneUsingGET5(id, options)(this.fetch, this.basePath);
    }

}

/**
 * StudentControllerApi - fetch parameter creator
 * @export
 */
export const StudentControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add CVItem with given name to CV of student with a given id
         * @param {CVItemDTO} cvItem cvItem
         * @param {number} id The cvId of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCVItemUsingPOST(cvItem: CVItemDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'cvItem' is not null or undefined
            if (cvItem === null || cvItem === undefined) {
                throw new RequiredError('cvItem','Required parameter cvItem was null or undefined when calling addCVItemUsingPOST.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addCVItemUsingPOST.');
            }
            const localVarPath = `/students/{id}/cv`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CVItemDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cvItem || {}) : (cvItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete CVItem with given name from CV of student with a given id
         * @param {number} cvId cvId
         * @param {number} id The id of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCVItemUsingDELETE(cvId: number, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'cvId' is not null or undefined
            if (cvId === null || cvId === undefined) {
                throw new RequiredError('cvId','Required parameter cvId was null or undefined when calling deleteCVItemUsingDELETE.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCVItemUsingDELETE.');
            }
            const localVarPath = `/students/{id}/cv/{cvId}`
                .replace(`{${"cvId"}}`, encodeURIComponent(String(cvId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Student with id
         * @param {number} id The id of the student being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteStudentUsingDELETE.');
            }
            const localVarPath = `/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit CVItem with given name from CV of student with a given id
         * @param {CVItemDTO} cvItem cvItem
         * @param {number} id The id of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCVItemUsingPUT(cvItem: CVItemDTO, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'cvItem' is not null or undefined
            if (cvItem === null || cvItem === undefined) {
                throw new RequiredError('cvItem','Required parameter cvItem was null or undefined when calling editCVItemUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editCVItemUsingPUT.');
            }
            const localVarPath = `/students/{id}/cv`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CVItemDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(cvItem || {}) : (cvItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Student with id
         * @param {number} id The id of the student being edited
         * @param {UserDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStudentUsingPUT(id: number, student: UserDTO, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editStudentUsingPUT.');
            }
            // verify required parameter 'student' is not null or undefined
            if (student === null || student === undefined) {
                throw new RequiredError('student','Required parameter student was null or undefined when calling editStudentUsingPUT.');
            }
            const localVarPath = `/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(student || {}) : (student || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET6(options: any = {}): FetchArgs {
            const localVarPath = `/students`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Applications that Reviewer with reviewerNr has made
         * @param {number} id The id of the student to get all applications from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getApplicationsUsingGET.');
            }
            const localVarPath = `/students/{id}/applications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CVItem with given id
         * @param {number} cvId id of the CVItem
         * @param {number} id The id of the student to get the CV from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVItemUsingGET(cvId: number, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'cvId' is not null or undefined
            if (cvId === null || cvId === undefined) {
                throw new RequiredError('cvId','Required parameter cvId was null or undefined when calling getCVItemUsingGET.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCVItemUsingGET.');
            }
            const localVarPath = `/students/{id}/cv/{cvId}`
                .replace(`{${"cvId"}}`, encodeURIComponent(String(cvId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CV of student with a given id
         * @param {number} id The id of the student to get the CV from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVUsingGET(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCVUsingGET.');
            }
            const localVarPath = `/students/{id}/cv`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} id The id of the student being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET6(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOneUsingGET6.');
            }
            const localVarPath = `/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentControllerApi - functional programming interface
 * @export
 */
export const StudentControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add CVItem with given name to CV of student with a given id
         * @param {CVItemDTO} cvItem cvItem
         * @param {number} id The cvId of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCVItemUsingPOST(cvItem: CVItemDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).addCVItemUsingPOST(cvItem, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete CVItem with given name from CV of student with a given id
         * @param {number} cvId cvId
         * @param {number} id The id of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCVItemUsingDELETE(cvId: number, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).deleteCVItemUsingDELETE(cvId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Student with id
         * @param {number} id The id of the student being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).deleteStudentUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit CVItem with given name from CV of student with a given id
         * @param {CVItemDTO} cvItem cvItem
         * @param {number} id The id of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCVItemUsingPUT(cvItem: CVItemDTO, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).editCVItemUsingPUT(cvItem, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit Student with id
         * @param {number} id The id of the student being edited
         * @param {UserDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStudentUsingPUT(id: number, student: UserDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).editStudentUsingPUT(id, student, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET6(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getAllUsingGET6(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of all Applications that Reviewer with reviewerNr has made
         * @param {number} id The id of the student to get all applications from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Iterable> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getApplicationsUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get CVItem with given id
         * @param {number} cvId id of the CVItem
         * @param {number} id The id of the student to get the CV from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVItemUsingGET(cvId: number, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CVDTO> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getCVItemUsingGET(cvId, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get CV of student with a given id
         * @param {number} id The id of the student to get the CV from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CVDTO> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getCVUsingGET(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} id The id of the student being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET6(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDTO> {
            const localVarFetchArgs = StudentControllerApiFetchParamCreator(configuration).getOneUsingGET6(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StudentControllerApi - factory interface
 * @export
 */
export const StudentControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add CVItem with given name to CV of student with a given id
         * @param {CVItemDTO} cvItem cvItem
         * @param {number} id The cvId of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCVItemUsingPOST(cvItem: CVItemDTO, id: number, options?: any) {
            return StudentControllerApiFp(configuration).addCVItemUsingPOST(cvItem, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete CVItem with given name from CV of student with a given id
         * @param {number} cvId cvId
         * @param {number} id The id of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCVItemUsingDELETE(cvId: number, id: number, options?: any) {
            return StudentControllerApiFp(configuration).deleteCVItemUsingDELETE(cvId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Student with id
         * @param {number} id The id of the student being deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentUsingDELETE(id: number, options?: any) {
            return StudentControllerApiFp(configuration).deleteStudentUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit CVItem with given name from CV of student with a given id
         * @param {CVItemDTO} cvItem cvItem
         * @param {number} id The id of the student to delete the CVItem from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCVItemUsingPUT(cvItem: CVItemDTO, id: number, options?: any) {
            return StudentControllerApiFp(configuration).editCVItemUsingPUT(cvItem, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit Student with id
         * @param {number} id The id of the student being edited
         * @param {UserDTO} student student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStudentUsingPUT(id: number, student: UserDTO, options?: any) {
            return StudentControllerApiFp(configuration).editStudentUsingPUT(id, student, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET6(options?: any) {
            return StudentControllerApiFp(configuration).getAllUsingGET6(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of all Applications that Reviewer with reviewerNr has made
         * @param {number} id The id of the student to get all applications from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsUsingGET(id: number, options?: any) {
            return StudentControllerApiFp(configuration).getApplicationsUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get CVItem with given id
         * @param {number} cvId id of the CVItem
         * @param {number} id The id of the student to get the CV from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVItemUsingGET(cvId: number, id: number, options?: any) {
            return StudentControllerApiFp(configuration).getCVItemUsingGET(cvId, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get CV of student with a given id
         * @param {number} id The id of the student to get the CV from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCVUsingGET(id: number, options?: any) {
            return StudentControllerApiFp(configuration).getCVUsingGET(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get Student by id
         * @param {number} id The id of the student being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET6(id: number, options?: any) {
            return StudentControllerApiFp(configuration).getOneUsingGET6(id, options)(fetch, basePath);
        },
    };
};

/**
 * StudentControllerApi - object-oriented interface
 * @export
 * @class StudentControllerApi
 * @extends {BaseAPI}
 */
export class StudentControllerApi extends BaseAPI {
    /**
     * 
     * @summary Add CVItem with given name to CV of student with a given id
     * @param {CVItemDTO} cvItem cvItem
     * @param {number} id The cvId of the student to delete the CVItem from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public addCVItemUsingPOST(cvItem: CVItemDTO, id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).addCVItemUsingPOST(cvItem, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete CVItem with given name from CV of student with a given id
     * @param {number} cvId cvId
     * @param {number} id The id of the student to delete the CVItem from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public deleteCVItemUsingDELETE(cvId: number, id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).deleteCVItemUsingDELETE(cvId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Student with id
     * @param {number} id The id of the student being deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public deleteStudentUsingDELETE(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).deleteStudentUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit CVItem with given name from CV of student with a given id
     * @param {CVItemDTO} cvItem cvItem
     * @param {number} id The id of the student to delete the CVItem from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public editCVItemUsingPUT(cvItem: CVItemDTO, id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).editCVItemUsingPUT(cvItem, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit Student with id
     * @param {number} id The id of the student being edited
     * @param {UserDTO} student student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public editStudentUsingPUT(id: number, student: UserDTO, options?: any) {
        return StudentControllerApiFp(this.configuration).editStudentUsingPUT(id, student, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Students
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getAllUsingGET6(options?: any) {
        return StudentControllerApiFp(this.configuration).getAllUsingGET6(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of all Applications that Reviewer with reviewerNr has made
     * @param {number} id The id of the student to get all applications from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getApplicationsUsingGET(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).getApplicationsUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get CVItem with given id
     * @param {number} cvId id of the CVItem
     * @param {number} id The id of the student to get the CV from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getCVItemUsingGET(cvId: number, id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).getCVItemUsingGET(cvId, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get CV of student with a given id
     * @param {number} id The id of the student to get the CV from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getCVUsingGET(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).getCVUsingGET(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get Student by id
     * @param {number} id The id of the student being retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentControllerApi
     */
    public getOneUsingGET6(id: number, options?: any) {
        return StudentControllerApiFp(this.configuration).getOneUsingGET6(id, options)(this.fetch, this.basePath);
    }

}

